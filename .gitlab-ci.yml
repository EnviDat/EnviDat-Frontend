# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/user/application_security/secret_detection/pipeline/configure
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
include:
- local: ".gitlab-ci-deployment.yml"
- local: ".gitlab-ci-seo.yml"
- template: Security/SAST.gitlab-ci.yml
stages:
- config
- test
- build
- deploy
- manual-deploy
workflow:
  rules:
  - if: $CI_PIPELINE_SOURCE == "pipeline"
  - if: $CI_PIPELINE_SOURCE == "web"
  - if: $CI_PIPELINE_SOURCE == "schedule"
  - if: "$CI_COMMIT_REF_NAME =~ /^(main|staging|develop)$/"
    when: always
  - when: never
variables:
  ARTIFACT_COMPRESSION_LEVEL: fast
  CACHE_COMPRESSION_LEVEL: fast
".normal-rules":
  rules:
  - when: always
".build-rules":
  rules:
  - if: $CI_PIPELINE_SOURCE == "pipeline"
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: never
  - when: always
".deployment-rules":
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: never
  - when: always
".manual-deployment-rules":
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: never
  - when: manual
set-vars:
  stage: ".pre"
  image: alpine:3.20
  environment: "$CI_COMMIT_REF_NAME"
  extends: ".normal-rules"
  allow_failure: false
  before_script:
  - 'apk add jq yq --no-cache --repository=https://dl-cdn.alpinelinux.org/alpine/edge/community

    '
  script:
  - VERSION=$(jq '.version' package.json --raw-output)
  - |
    if [ unset"${BUILD_VERSION}" == "unset" ]; then
      echo "BUILD_VERSION=${VERSION}" >> build.env
      echo "BUILD_VERSION was unset. Set to ${VERSION}."
      cat build.env
    else
      echo "BUILD_VERSION=${BUILD_VERSION}" >> build.env
      echo "BUILD_VERSION is already set to ${BUILD_VERSION}."
      cat build.env
    fi
  - echo "information environment ${CI_COMMIT_REF_NAME}"
  - |
    if [ "${CI_COMMIT_REF_NAME}" == "develop" ]; then
      echo "CI_COMMIT_REF_NAME=dev" >> build.env
    fi
  - cat .env >> build.env
  - source build.env
  - echo "BUILD_NAME=${BUILD_VERSION}.${CI_COMMIT_REF_NAME}" >> build.env
  - echo "BUILD_ZIP_NAME=envidat-frontend-${BUILD_VERSION}.${CI_COMMIT_REF_NAME}.zip"
    >> build.env
  - echo "Matomo token ${MATOMO_TOKEN}."
  - echo "Matomo siteId ${MATOMO_SITEID}."
  - echo "content of build.env"
  - echo "information environment ${CI_COMMIT_REF_NAME}"
  - cat build.env
  artifacts:
    reports:
      dotenv: build.env
modify-env:
  stage: config
  image: python:3.9-alpine3.17
  environment: "$CI_COMMIT_REF_NAME"
  extends: ".normal-rules"
  needs:
  - set-vars
  before_script:
  - if [ -z "$CI_COMMIT_REF_NAME" ]; then echo "CI_COMMIT_REF_NAME is empty!"; exit
    1; fi
  - echo "CI_COMMIT_REF_NAME is set to $CI_COMMIT_REF_NAME"
  - pip install --upgrade pip
  - pip install python-dotenv==0.19.*
  script:
  - |
    python -c "import os
    import dotenv

    file = '.env.production'
    branch = os.getenv('CI_COMMIT_REF_NAME')

    key = 'VITE_DOMAIN'
    value = 'https://envidat04.wsl.ch'

    if branch == 'main' or branch == 'beta':
        value = 'https://envidat.ch'

    dotenv.set_key(file, key, value, quote_mode='never')

    key = 'VITE_API_ROOT'
    value = 'https://envidat04.wsl.ch'

    if branch == 'main' or branch == 'beta':
        value = 'https://envidat.ch'

    dotenv.set_key(file, key, value, quote_mode='never')

    # also set the canonical url with same value as the api root
    key = 'PUBLIC_ENV__VIKE_BASE_CANONICAL_URL'
    dotenv.set_key(file, key, value, quote_mode='never')

    key = 'VITE_MATOMO_TOKEN'
    token = os.getenv('MATOMO_TOKEN')
    dotenv.set_key(file, key, token, quote_mode='never')

    key = 'VITE_MATOMO_SITEID'
    token = os.getenv('MATOMO_SITEID')
    dotenv.set_key(file, key, token, quote_mode='never')

    key = 'VITE_CONFIG_URL'
    value = f'https://frontend-config.s3-zh.os.switch.ch/{branch}.json'
    dotenv.set_key(file, key, value, quote_mode='never')

    key = 'VITE_BUILD_SOURCEMAPS'
    value = 'false'

    if branch == 'staging' or branch == 'develop' or branch == 'dev':
        value = 'true'

    dotenv.set_key(file, key, value, quote_mode='never')

    key = 'VITE_GOOGLE_VERIFICATION_KEY'
    value = os.getenv('GOOGLE_VERIFICATION_KEY')
    dotenv.set_key(file, key, value, quote_mode='never')

    key = 'VITE_SEO_BASE'
    value = 'https://envidat04.wsl.ch/seo'

    if branch == 'main' or branch == 'beta':
        value = 'https://envidat.ch/seo'

    dotenv.set_key(file, key, value, quote_mode='never')

    "
  - echo "created content for .env.production:"
  - cat .env.production
  artifacts:
    name: environment variables
    paths:
    - ".env.production"
  retry:
    max: 2
install-node:
  stage: config
  image: node:20.15.0-alpine3.20
  environment: "$CI_COMMIT_REF_NAME"
  cache:
  - key:
      files:
      - package-lock.json
      prefix: package-lock
    paths:
    - node_modules/
    policy: pull-push
    untracked: true
    when: on_success
  extends: ".normal-rules"
  before_script:
  - npm config set fund false
  script:
  - "if [ -d \"node_modules\" ] && [ -d \"node_modules/.bin\" ]; then\n  if [ \"$FORCE_NPM_INSTALL\"
    = \"true\" ]; then\n    echo \"FORCE_NPM_INSTALL $FORCE_NPM_INSTALL so going to
    run npm ci\"\n    npm ci --prefer-offline --no-audit\n  else\n    echo \"node_modules
    and it's .bin directory already exists. Skipping npm ci.\"\n  fi      \nelse\n
    \ echo \"node_modules or it's .bin directory not found. Running npm ci...\"\n
    \ npm ci --prefer-offline --no-audit\nfi\n"
  artifacts:
    name: node dependencies
    paths:
    - node_modules/**/*
    expire_in: 1 day
  retry:
    max: 2
run-tests:
  stage: test
  image: node:20.15.0-alpine3.20
  environment: "$CI_COMMIT_REF_NAME"
  extends: ".normal-rules"
  needs:
  - modify-env
  - install-node
  before_script:
  - |
    if [ -d "node_modules" ]; then
      echo "node_modules directory already exists."
      ls node_modules/.bin/vitest || echo "/.bin/vitest not found"
    else
      echo "node_modules directory not found. Should have got them from the install-node artifact!"
      ls -a
    fi
  script:
  - npm run test
  retry:
    max: 2
build-storybook:
  stage: build
  image: node:20.15.0-alpine3.20
  environment: "$CI_COMMIT_REF_NAME"
  extends: ".build-rules"
  needs:
  - modify-env
  - install-node
  before_script:
  - |
    if [ -d "node_modules" ]; then
      echo "node_modules directory already exists."
      ls node_modules/.bin/storybook || echo "/.bin/storybook not found"
    else
      echo "node_modules directory not found. Should have got them from the install-node artifact!"
      ls -a
    fi
  script:
  - npm run build-storybook -- -o ./storybook --loglevel warn --disable-telemetry
  artifacts:
    name: storybook build
    expire_in: 1 day
    paths:
    - storybook
  retry:
    max: 2
build-app:
  stage: build
  image: node:20.15.0-alpine3.20
  environment: "$CI_COMMIT_REF_NAME"
  extends: ".build-rules"
  needs:
  - modify-env
  - install-node
  before_script:
  - |
    if [ -d "node_modules" ]; then
      echo "node_modules directory already exists."
      ls node_modules/.bin/vite || echo "/.bin/vite not found"
    else
      echo "node_modules directory not found. Should have got them from the install-node artifact!"
      ls -a
    fi
  script:
  - npm run build -- --logLevel warn
  artifacts:
    name: 'frontend build '
    expire_in: 1 day
    paths:
    - dist
  retry:
    max: 2
combine-builds:
  stage: build
  image: alpine:3.20
  environment: "$CI_COMMIT_REF_NAME"
  extends: ".build-rules"
  variables:
    GIT_STRATEGY: none
  needs:
  - job: build-app
  - job: build-storybook
  - job: build-seo
    optional: true
  script:
  - cp -r dist/* ./
  - rm -rf dist
  artifacts:
    name: frontend build $CI_COMMIT_REF_NAME
    expire_in: 1 day
    paths:
    - "./"
sast:
  stage: test
