stages:
  # - visual-regression
  - test
  - config
  - build
  - scan
  - package
  - deploy

variables:
  ARTIFACT_COMPRESSION_LEVEL: "fast"
  CACHE_COMPRESSION_LEVEL: "fast"

workflow:
  rules:
    - if: >
          ($CI_COMMIT_REF_NAME == "main"
          && $CI_PIPELINE_SOURCE == "merge_request_event")
      when: always
    - if: >
          ($CI_COMMIT_REF_NAME == "staging"
          && $CI_PIPELINE_SOURCE == "merge_request_event")
      when: always
    - if: >
          ($CI_COMMIT_REF_NAME == "develop"
          && $CI_PIPELINE_SOURCE == "push")
      changes:
        - src/**/*
        - public/**/*
        - tests/**/*
        - .env*
        - package.json
        - vue.*
      when: always
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always

set-vars:
  stage: .pre
  image: docker.io/alpine:3.15
  before_script:
    - >
      apk add jq yq --no-cache
      --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community
  script:
    - echo "VERSION=$(jq '.version' package.json --raw-output)" >> build.env
    - cat .env >> build.env
    - echo "NAMESPACE=envidat-frontend" >> build.env
    - |
      if [ "${CI_COMMIT_REF_NAME}" == "develop" ]; then
          echo "APP_NAME=frontend-dev" >> build.env
      else
          echo "APP_NAME=frontend-${CI_COMMIT_REF_NAME}" >> build.env
      fi
    - echo CHART_VERSION=$(yq '.version' chart/Chart.yaml) >> build.env
    - source build.env
    - >
      echo "IMAGE_NAME=${INTERNAL_REG}/frontend:${VERSION}-${CI_COMMIT_REF_NAME}"
      >> build.env
  artifacts:
    reports:
      dotenv: build.env

run-tests:
  stage: test
  image: docker.io/node:16
  cache:
    key: node-modules
    paths:
      - node_modules/
    policy: pull-push
  before_script:
    - npm install
  script:
    - npm run test:unit

# visual-regression:
#   stage: visual-regression
#   image: docker.io/node:16
#   cache:
#     key: node-modules
#     paths:
#       - node_modules/
#     policy: pull
#   before_script:
#     - npm install
#   script:
#     - npx chromatic --project-token=${CHROMATIC_PROJECT_TOKEN} --exit-zero-on-changes

modify-env:
  stage: config
  image: docker.io/python:3.9-alpine
  cache:
    key: dotenv-config
    paths:
      - .env.production
    policy: push
  before_script:
    - pip install --upgrade pip
    - pip install python-dotenv==0.19.*
  script:
    - "python -c
      \"import os;
      import dotenv;
      file = '.env.production';
      key = 'VUE_APP_ENVIDAT_PROXY';
      app_name = os.getenv('APP_NAME');
      value = f'https://{app_name}.envidat.ch';
      dotenv.set_key(file, key, value, quote_mode='never')\"
      "

image-build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  cache:
    key: dotenv-config
    paths:
      - .env.production
    policy: pull
  before_script:
    - cat .env.production
    - >
      echo "${IMAGE_REGISTRY_CA_CERT}"
      | base64 -d >> /kaniko/ssl/certs/ca-certificates.crt
    - mkdir -p /kaniko/.docker
    - >
      echo "{\"auths\":{\"${INTERNAL_REG}\":{\"auth\":\"$(printf
      "%s:%s" "${IMAGE_REGISTRY_USER}" "${IMAGE_REGISTRY_PASS}"
      | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  script:
    - >
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --target prod
      --cache=true
      --destination "${IMAGE_NAME}-unverified"
      --build-arg MAINTAINER_APP="${MAINTAINER_APP}"
      --build-arg MAINTAINER_CD="${MAINTAINER_CD}"
      --build-arg EXTERNAL_REG="${EXTERNAL_REG}"

image-scan:
  stage: scan
  image:
    name: docker.io/aquasec/trivy:0.23.0
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  before_script:
    - >
      echo "${IMAGE_REGISTRY_CA_CERT}"
      | base64 -d >> /etc/ssl/certs/ca-certificates.crt
  script:
    - trivy --version
    - time trivy image --clear-cache
    - time trivy --cache-dir .trivycache/ image --download-db-only --no-progress
    # Create report artifact
    - >
      time trivy --cache-dir .trivycache/ image --exit-code 0 --ignore-unfixed
      --no-progress --format template --template "@/contrib/gitlab.tpl"
      --output "$CI_PROJECT_DIR/envidat-frontend-imgscan.json"
      "${IMAGE_NAME}-unverified"
    # Print full report
    - >
      time trivy --cache-dir .trivycache/ image --exit-code 0 --ignore-unfixed
      --no-progress "${IMAGE_NAME}"-unverified
    # Fail on critical vulnerabilities
    - >
      time trivy --cache-dir .trivycache/ image --exit-code 1 --ignore-unfixed
      --severity CRITICAL --no-progress "${IMAGE_NAME}"-unverified
  cache:
    key: trivy-cache
    paths:
      - .trivycache/
    policy: pull-push
  artifacts:
    when: always
    reports:
      container_scanning: envidat-frontend-imgscan.json

image-retag:
  stage: package
  image: docker.io/regclient/regctl:v0.3-alpine
  variables:
    GIT_STRATEGY: none
  before_script:
    - export REG_HOST=${INTERNAL_REG%/*}
    - >
      echo "{\"hosts\":{\"${REG_HOST}\":{\"tls\":\"enabled\",\"regcert\":
      \"$(printf "%s" "${IMAGE_REGISTRY_CERT}" | base64 -d
      | awk 'NF {sub(/\r/, ""); printf "%s\\n",$0;}')\",\"hostname\":
      \"${REG_HOST}\",\"user\":\"${IMAGE_REGISTRY_USER}\",\"pass\":
      \"${IMAGE_REGISTRY_PASS}\"}}}" >> /home/appuser/.regctl/config.json
  script:
    - >
      regctl --verbosity debug image copy
      "${IMAGE_NAME}-unverified" "${IMAGE_NAME}"
    - regctl --verbosity debug tag delete "${IMAGE_NAME}-unverified"

.helm:
  stage: deploy
  image:
    name: docker.io/alpine/helm:3.8.0
    entrypoint: [""]
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
      when: always
  before_script:
    - >
      echo "${IMAGE_REGISTRY_CA_CERT}"
      | base64 -d >> /etc/ssl/certs/ca-certificates.crt
    - mkdir -p /root/.config/helm/registry
    - >
      echo "{\"auths\":{\"${INTERNAL_REG}\":{\"auth\":\"$(printf "%s:%s"
      "${IMAGE_REGISTRY_USER}" "${IMAGE_REGISTRY_PASS}" | base64
      | tr -d '\n')\"}}}" > /root/.config/helm/registry/config.json
    - export HELM_APP_VERSION="${VERSION}-${CI_COMMIT_REF_NAME}"

create-helm-chart:
  extends:
    - .helm
  stage: package
  script:
    - >
      apk add yq --no-cache
      --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community
    - helm dependencies build chart
    - yq -i '.appVersion = strenv(HELM_APP_VERSION)' chart/Chart.yaml
    - helm package chart
    - CHART_VER=$(yq '.version' chart/Chart.yaml)
    - helm push "frontend-${CHART_VER}.tgz" oci://registry.envidat.ch/envidat

helm-deploy:
  extends:
    - .helm
  rules:
    - if: $CI_COMMIT_REF_NAME != "main"
      when: always
  variables:
    GIT_STRATEGY: none
  script:
    - >
      helm upgrade --install --create-namespace "${APP_NAME}"
      oci://registry.envidat.ch/envidat/frontend
      --namespace "${NAMESPACE}"
      --version "${CHART_VERSION}"
      --set image.tag="${HELM_APP_VERSION}"
      --set image.pullPolicy="Always"
      --set ingress.hosts[0].host="${APP_NAME}.envidat.ch"
      --set ingress.hosts[0].paths[0].path="/"
      --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"
      --set ingress.tls[0].secretName="envidat-star"
      --set ingress.tls[0].hosts[0]="${APP_NAME}.envidat.ch"
      --set autoscaling.enabled=false

helm-deploy-prod:
  extends:
    - .helm
  variables:
    GIT_STRATEGY: none
  script:
    - >
      helm upgrade --install "${APP_NAME}"
      oci://registry.envidat.ch/envidat/frontend
      --namespace "${NAMESPACE}" --create-namespace
      --version "${CHART_VERSION}"
