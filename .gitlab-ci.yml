stages:
  - test
  - visual-regression
  - config
  - build
  - package
  - deploy
  - release

variables:
  ARTIFACT_COMPRESSION_LEVEL: "fast"
  CACHE_COMPRESSION_LEVEL: "fast"

.trigger-rules:
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^(main|staging|develop|beta)$/'
      changes:
        - 'src/**/*'
        - 'public/**/*'
        - 'tests/**/*'
        - 'nginx/**/*'
        - 'chart/**/*'
        - '.env*'
        - 'package.json*'
        - 'vue.*'
        - 'Dockerfile'
        - '.gitlab-ci.yml'
      when: always
    - if: $CI_PIPELINE_SOURCE == "web"
      when: always

set-vars:
  stage: .pre
  image: docker.io/alpine:3.15
  rules:
    - !reference [.trigger-rules, rules]
    - if: $CI_COMMIT_TAG
  before_script:
    - >
      apk add jq yq --no-cache
      --repository=https://dl-cdn.alpinelinux.org/alpine/edge/community
  script:
    # extract version number from package.json, to make it available in the app
    - >
      echo "VERSION=$(jq '.version' package.json --raw-output)" >> build.env
    # move all variables from the from the CI / CD into the build variables
    - cat .env >> build.env
    - |
      if [ "${CI_COMMIT_REF_NAME}" == "develop" ]; then
        echo "CI_COMMIT_REF_NAME=dev" >> build.env
      fi
    # bash "source" command loads all the variables from the file
    - source build.env
    # extract version number from package.json, to make it available in the app
    - >
      echo "IMAGE_NAME=${INTERNAL_REG}/envidat-frontend:${VERSION}-${CI_COMMIT_REF_NAME}"
      >> build.env
    - echo "content of build.env"
    - cat build.env
  artifacts:
    reports:
      dotenv: build.env

run-tests:
  extends: .trigger-rules
  stage: test
  image: docker.io/node:16
  cache:
    key: node-modules
    paths:
      - node_modules/
    policy: pull-push
  before_script:
    - npm ci
  script:
    - npm run test

visual-regression:
  stage: visual-regression
  image: docker.io/node:16
  cache:
    key: node-modules
    paths:
      - node_modules/
    policy: pull
  before_script:
    - npm ci
  script:
    - npx chromatic --project-token=${CHROMATIC_PROJECT_TOKEN} --exit-zero-on-changes
  dependencies:
    - set-vars
  when: manual

modify-env:
  extends: .trigger-rules
  stage: config
  image: docker.io/python:3.9-alpine
  before_script:
    - pip install --upgrade pip
    - pip install python-dotenv==0.19.*
  script:
    - |
      python -c "import os
      import dotenv

      file = '.env.production'
      branch = os.getenv('CI_COMMIT_REF_NAME')

      key = 'VITE_DOMAIN'
      value = f'https://{branch}.envidat.ch'
      if branch == 'main' or branch == 'beta':
          value = 'https://envidat.ch'
      dotenv.set_key(file, key, value, quote_mode='never')

      key = 'VITE_API_ROOT'
      value = f'https://{branch}.envidat.ch'
      if branch == 'main' or branch == 'beta':
          value = 'https://envidat.ch'
      dotenv.set_key(file, key, value, quote_mode='never')

      key = 'VITE_CONFIG_URL'
      value = f'https://frontend-config.s3-zh.os.switch.ch/{branch}.json'
      dotenv.set_key(file, key, value, quote_mode='never')"
    - echo "created content for .env.production:"
    - cat .env.production
  artifacts:
    paths:
      - .env.production

image-build:
  extends: .trigger-rules
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.1-debug
    entrypoint: [""]
  before_script:
    - mkdir -p /kaniko/.docker
    - >
      echo "{\"auths\":{\"${INTERNAL_REG}\":{\"auth\":\"$(printf
      "%s:%s" "${IMAGE_REGISTRY_USER}" "${IMAGE_REGISTRY_PASS}"
      | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  script:
    - echo "With content of .env.production"
    - cat .env.production
    - echo "Going to build image '${IMAGE_NAME}'"
    - >
      /kaniko/executor
      --force
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --target prod
      --cache=true
      --destination "${IMAGE_NAME}"
      --build-arg APP_VERSION="${VERSION}"
      --build-arg MAINTAINER_APP="${MAINTAINER_APP}"
      --build-arg MAINTAINER_CD="${MAINTAINER_CD}"
      --build-arg INTERNAL_REG="${INTERNAL_REG}"
      --build-arg EXTERNAL_REG="${EXTERNAL_REG}"
  dependencies:
    - set-vars
    - modify-env

tag-commit-sha:
  extends: .trigger-rules
  stage: package
  image: docker.io/regclient/regctl:v0.3-alpine
  variables:
    GIT_STRATEGY: none
  before_script:
    - export REG_HOST=${INTERNAL_REG%/*}
    - >
      echo "{\"hosts\":{\"${REG_HOST}\":{\"tls\":\"enabled\",\"hostname\":
      \"${REG_HOST}\",\"user\":\"${IMAGE_REGISTRY_USER}\",\"pass\":
      \"${IMAGE_REGISTRY_PASS}\"}}}" >> /home/appuser/.regctl/config.json
  script:
      - >
        regctl --verbosity debug image copy
        "${IMAGE_NAME}" "${INTERNAL_REG}/envidat-frontend:${CI_COMMIT_SHA}"
  dependencies:
    - image-build

rclone-sync:
  extends: .trigger-rules
  stage: deploy
  image: "${INTERNAL_REG}/envidat-frontend:${CI_COMMIT_SHA}"
  variables:
    GIT_STRATEGY: none
    RCLONE_CONFIG_SWITCH_TYPE: 's3'
    RCLONE_S3_PROVIDER: 'Other'
    RCLONE_S3_ENV_AUTH: 'true'
  before_script:
    - apk add curl unzip --no-cache
    - curl -O https://downloads.rclone.org/v1.59.0/rclone-v1.59.0-linux-amd64.zip
    - unzip rclone-v1.59.0-linux-amd64.zip
    - cp rclone-v1.59.0-linux-amd64/rclone /usr/bin/
    - |
      if [ "${CI_COMMIT_REF_NAME}" == "main" ]; then
        BUCKET_NAME="frontend"
      else
        BUCKET_NAME="frontend-${CI_COMMIT_REF_NAME}"
      fi
      echo "Going to rclone sync to the bucket: '${BUCKET_NAME}'"
  script:
    - >
      rclone --verbose sync
      /usr/share/nginx/html/ "switch:${BUCKET_NAME}"
  dependencies:
    - image-build
