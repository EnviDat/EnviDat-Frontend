stages:
  # - test
  # - visual-regression
  - build
  # - scan
  # - retag
  - deploy

variables:
  NAMESPACE: frontend
  APP_NAME: frontend-${CI_COMMIT_REF_NAME}
  FF_USE_FASTZIP: "true"
  ARTIFACT_COMPRESSION_LEVEL: "fast"
  CACHE_COMPRESSION_LEVEL: "fast"

workflow:
  rules:
    - if: >
          ($CI_COMMIT_REF_NAME == "master" 
          && $CI_PIPELINE_SOURCE == "merge_request_event")
      when: always
    - if: >
          ($CI_COMMIT_REF_NAME == 'staging' 
          && $CI_PIPELINE_SOURCE == "merge_request_event")
      when: always
    - if: >
          ($CI_COMMIT_REF_NAME == 'develop' 
          && $CI_PIPELINE_SOURCE == "push")
      when: always
    - if: >
          ($CI_COMMIT_REF_NAME == 'ci-test' 
          && $CI_PIPELINE_SOURCE == "push")
      when: always

get-version:
  stage: .pre
  image: docker.io/alpine:3.15
  before_script:
    - apk add jq --no-cache
  script:
    - >
      echo "VERSION=$(cat package.json 
      | jq .version --raw-output)" > build.env
    - cat .env >> build.env
  artifacts:
    reports:
      dotenv: build.env

# run-tests:
#   stage: test
#   image: node:16
#   cache:
#     key: $CI_COMMIT_REF_SLUG
#     paths:
#       - node_modules/
#     policy: push-pull
#   before_script:
#     - npm install
#   script:
#     - npm run test:unit

# visual-regression:
#   stage: visual-regression
#   image: node:16
#   cache:
#     key: $CI_COMMIT_REF_SLUG
#     paths:
#       - node_modules/
#     policy: pull
#   before_script:
#     - npm install
#   script:
#     - npx chromatic --project-token=${CHROMATIC_PROJECT_TOKEN} --exit-zero-on-changes

image-build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - node_modules/
  before_script:
    - >
      echo "${IMAGE_REGISTRY_CA_CERT}"
      | base64 -d >> /kaniko/ssl/certs/ca-certificates.crt
    - mkdir -p /kaniko/.docker
    - >
      echo "{\"auths\":{\"${INTERNAL_REG}\":{\"auth\":\"$(printf
      "%s:%s" "${IMAGE_REGISTRY_USER}" "${IMAGE_REGISTRY_PASS}" 
      | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  script:
    - >
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --target prod
      --cache=true
      --destination "${INTERNAL_REG}/frontend:${VERSION}-${CI_COMMIT_REF_NAME}"
      --build-arg MAINTAINER_APP="${MAINTAINER_APP}"
      --build-arg MAINTAINER_CD="${MAINTAINER_CD}"
      --build-arg EXTERNAL_REG="${EXTERNAL_REG}"

# image-scan:
#   stage: scan
#   image:
#     name: docker.io/aquasec/trivy:0.23.0
#     entrypoint: [""]
#   before_script:
#     - apk add jq --no-cache
#     - export VERSION=$(cat package.json | jq .version --raw-output)
#     - source .env
#   script:
#     - time trivy image --clear-cache
#     - time trivy --download-db-only
#     - "time trivy --exit-code 0 --no-progress --ignore-unfixed \
#         --cache-dir .trivycache/ --format template \
#         --template @/contrib/gitlab.tpl \
#         --output $CI_PROJECT_DIR/gl-container-scanning-report.json \
#         ${INTERNAL_REG}/frontend:${VERSION}-${CI_COMMIT_REF_NAME}-unverified"
#     - "time trivy --exit-code 0 --no-progress --ignore-unfixed --cache-dir \
#         .trivycache/ ${INTERNAL_REG}/frontend:${VERSION}-${CI_COMMIT_REF_NAME}-unverified"
#     - "time trivy --exit-code 1 --no-progress --ignore-unfixed \
#         --cache-dir .trivycache/ --severity CRITICAL \
#         ${INTERNAL_REG}/frontend:${VERSION}-${CI_COMMIT_REF_NAME}-unverified"
#   cache:
#     paths:
#       - .trivycache/
#   artifacts:
#     when:
#     reports:
#       container_scanning: gl-container-scanning-report.json

# image-retag:
#   stage: retag
#   image:
#     name: docker.io/alpine:3.15
#   before_script:
#     - apk add skopeo jq --no-cache
#     - export VERSION=$(cat package.json | jq .version --raw-output)
#     - source .env
#     - echo "$IMAGE_REGISTRY_PASS" | skopeo login \
#         -u "$IMAGE_REGISTRY_USER" --password-stdin "$INTERNAL_REG"
#   script:
#     - "skopeo copy \
#         ${INTERNAL_REG}/frontend:${VERSION}-${CI_COMMIT_REF_NAME}-unverified \
#         ${INTERNAL_REG}/frontend:${VERSION}-${CI_COMMIT_REF_NAME}" 

helm-deploy:
  stage: deploy
  image:
    name: alpine/helm:3.8.0
    entrypoint: [""]
  before_script:
    - apk add jq yq --no-cache
    - export VERSION=$(cat package.json | jq .version --raw-output)
  script: |
    yq write \
      --inplace --verbose ./chart/Chart.yaml \
      appVersion "${VERSION}"-"${CI_COMMIT_REF_NAME}"
    if [ "${CI_COMMIT_REF_NAME}" != "master" ]; then
        yq write \
          --inplace --verbose ./chart/values.yaml \
          ingress.hosts[0].host "${APP_NAME}".envidat.ch
        yq write \
          --inplace --verbose ./chart/values.yaml \
          ingress.tls[0].hosts[0] "${APP_NAME}".envidat.ch
        yq write \
          --inplace --verbose ./chart/values.yaml \
          autoscaling.enabled false
    fi
    helm upgrade ${APP_NAME} ./chart \
      --install --values=./chart/values.yaml \
      --namespace ${NAMESPACE}
  # rules:
  #   - if: $CI_COMMIT_REF_NAME == 'master'
  #     when: always
