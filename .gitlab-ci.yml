include:
  - local: '.gitlab-ci-deployment.yml'
#  - local: '.gitlab-ci_envidat-in-a-box.yml'

stages:
  - config
  - test
  - build
  - deploy
  - manual-deploy

variables:
  ARTIFACT_COMPRESSION_LEVEL: 'fast'
  CACHE_COMPRESSION_LEVEL: 'fast'
#  npm_config_cache: '.npm/'

.trigger-rules:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
    # Exclude feature branches that start with 'feature/'
    - if: '$CI_COMMIT_REF_NAME !~ /^feature\//'
      when: never
    - if: '$CI_COMMIT_REF_NAME =~ /^(main|staging|develop)$/'
    - if: $CI_PIPELINE_SOURCE == "web"
      when: always

set-vars:
  stage: .pre
  image: alpine:3.20
  environment: $CI_COMMIT_REF_NAME
  rules:
    # Exclude feature branches that start with 'feature/'
    - if: '$CI_COMMIT_REF_NAME !~ /^feature\//'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
    - if: '$CI_COMMIT_REF_NAME =~ /^(main|staging|develop)$/'
    - if: $CI_PIPELINE_SOURCE == "web"
      when: always
    - when: manual
  # for manual jobs add allow_failure so the whole pipeline won't show up as "blocked"
  allow_failure: true
  before_script:
    - >
      apk add jq yq --no-cache
      --repository=https://dl-cdn.alpinelinux.org/alpine/edge/community
  script:
    - VERSION=$(jq '.version' package.json --raw-output)
    # if BUILD_VERSION is alredy set it's overwritten from another pipeline and this has to be used
    # extract version number from package.json, to make it available in the app
    # use unset"${BUILD_VERSION" to check if variable is set, will cover both cases null and "unset" / empty string
    - |
      if [ unset"${BUILD_VERSION}" == "unset" ]; then
        echo "BUILD_VERSION=${VERSION}" >> build.env
        echo "BUILD_VERSION was unset. Set to ${VERSION}."
        cat build.env
      else
        echo "BUILD_VERSION=${BUILD_VERSION}" >> build.env
        echo "BUILD_VERSION is already set to ${BUILD_VERSION}."
        cat build.env
      fi
    - echo "information environment ${CI_COMMIT_REF_NAME}"
    - |
      if [ "${CI_COMMIT_REF_NAME}" == "develop" ]; then
        echo "CI_COMMIT_REF_NAME=dev" >> build.env
      fi
    # move all variables from the CI / CD into the build variables
    - cat .env >> build.env
    # bash "source" command loads all the variables from the file
    - source build.env
    # set build variables for the package registry
    - echo "BUILD_NAME=${BUILD_VERSION}-${CI_COMMIT_REF_NAME}" >> build.env
    - echo "BUILD_ZIP_NAME=envidat-frontend-${BUILD_VERSION}-${CI_COMMIT_REF_NAME}.zip" >> build.env
    - echo "Matomo token ${MATOMO_TOKEN}."
    - echo "content of build.env"
    - echo "information environment ${CI_COMMIT_REF_NAME}"
    - cat build.env
  artifacts:
    reports:
      dotenv: build.env

modify-env:
  stage: config
  image: python:3.9-alpine3.17
  environment: $CI_COMMIT_REF_NAME  
  extends: .trigger-rules
  dependencies:
    - set-vars
  before_script:
    - pip install --upgrade pip
    - pip install python-dotenv==0.19.*
  script:
    - |
      python -c "import os
      import dotenv

      file = '.env.production'
      branch = os.getenv('CI_COMMIT_REF_NAME')

      key = 'VITE_DOMAIN'
      value = f'http://{branch}.envidat.ch'
      if branch == 'main' or branch == 'beta':
          value = 'https://envidat.ch'
      dotenv.set_key(file, key, value, quote_mode='never')

      key = 'VITE_API_ROOT'
      value = f'http://{branch}.envidat.ch'
      if branch == 'main' or branch == 'beta':
          value = 'https://envidat.ch'
      dotenv.set_key(file, key, value, quote_mode='never')

      key = 'VITE_MATOMO_TOKEN'
      token = os.getenv('MATOMO_TOKEN')
      dotenv.set_key(file, key, token, quote_mode='never')

      key = 'VITE_CONFIG_URL'
      value = f'https://frontend-config.s3-zh.os.switch.ch/{branch}.json'
      dotenv.set_key(file, key, value, quote_mode='never')

      key = 'VITE_BUILD_SOURCEMAPS'
      value = 'false'
      if branch == 'staging' or branch == 'develop':
          value = 'true'
      dotenv.set_key(file, key, value, quote_mode='never') "
    - echo "created content for .env.production:"
    - cat .env.production
  artifacts:
    name: 'environment variables'
    paths:
      - .env.production

install-node:
  stage: config
  image: node:20.15.0-alpine3.20
  environment: $CI_COMMIT_REF_NAME  
  # overwrite the global caching to use push-pull policy
  cache:
    - key:
        files:
          - package-lock.json
        prefix: 'package-lock'
      paths:
        - .npm/
        - node_modules/
      # pull-push to be able to update the node_modules in the cache
      policy: pull-push
      untracked: true
      when: on_success
  extends:
    - .trigger-rules
  script:
    - echo "the cache work if node_modules and .npm/ folders are available"
    - ls -a
    - npm ci --prefer-offline --no-audit
  #    - echo "Check afterwards how the folders are"
  #    - ls -a
  artifacts:
    name: 'node dependencies'
    # stores node_modules as an artifact to be used in the next jobs
    # caching isn't always guaranteed to work
    paths:
      - node_modules
    expire_in: 1 day
  retry:
    max: 2

run-tests:
  stage: test
  image: node:20.15.0-alpine3.20
  environment: $CI_COMMIT_REF_NAME  
  extends:
    - .trigger-rules
  needs:
    - modify-env
    - install-node
  script:
    - npm run test
  retry:
    max: 2

build-storybook:
  stage: build
  image: node:20.15.0-alpine3.20
  environment: $CI_COMMIT_REF_NAME  
  extends:
    - .trigger-rules
  needs:
    # needs the artifact: config and environment variables
    - modify-env
    # needs the artifact: node_modules to build storybook
    - install-node
  script:
    # - npm config set cache .npm/
    # - npm cache verify || true
    - npm run build-storybook -- -o ./storybook --loglevel error --disable-telemetry
  artifacts:
    name: 'storybook build'
    # keep the storybook for 7 days to be able to trigger the chromatic-deployment
    expire_in: 1 day
    # stores the storybook build as an artifact to be used in the next stages
    paths:
      - storybook
  retry:
    max: 2

build-app:
  stage: build
  image: node:20.15.0-alpine3.20
  environment: $CI_COMMIT_REF_NAME  
  extends:
    - .trigger-rules
  needs:
    # needs the artifact: config and environment variables
    - modify-env
    # needs the artifact: node_modules to build the app
    - install-node
  script:
    - npm run build -- --logLevel error
  artifacts:
    name: 'frontend build '
    expire_in: 1 day
    # stores the built app code
    paths:
      - dist
  retry:
    max: 2

combine-builds:
  stage: build
  image: alpine:3.20
  environment: $CI_COMMIT_REF_NAME  
  extends: .trigger-rules
  variables:
    GIT_STRATEGY: none
  needs:
    # needs the artifact: the build of the frontend app
    - build-app
    # needs the artifact: storybook
    - build-storybook
  script:
    - echo "Check for the artifacts in the filesystem"
    # - ls -l
    # - ls dist/ -l
    # - ls storybook/ -l
    # copy all files from the dist folder into root
    - cp -r dist/* ./
    # - ls -l
    # remove the dist folder recursively
    - rm -rf dist
    - ls -la
  artifacts:
    name: 'frontend build $CI_COMMIT_REF_NAME'
    expire_in: 1 day
    # stores the combined built code
    paths:
      - ./
#tag-commit-sha:
#  extends: .trigger-rules
#  stage: package
#  image: regclient/regctl:v0.3-alpine
#  variables:
#    GIT_STRATEGY: none
#  before_script:
#    - export REG_HOST=${INTERNAL_REG%/*}
#    - >
#      echo "{\"hosts\":{\"${REG_HOST}\":{\"tls\":\"enabled\",\"hostname\":
#      \"${REG_HOST}\",\"user\":\"${IMAGE_REGISTRY_USER}\",\"pass\":
#      \"${IMAGE_REGISTRY_PASS}\"}}}" >> /home/appuser/.regctl/config.json
#  script:
#      - >
#        regctl --verbosity debug image copy
#        "${IMAGE_NAME}" "${INTERNAL_REG}/envidat-frontend:${CI_COMMIT_SHA}"

