stages:
  # - visual-regression
  - test
  - build
  - scan
  - retag
  - deploy

variables:
  ARTIFACT_COMPRESSION_LEVEL: "fast"
  CACHE_COMPRESSION_LEVEL: "fast"

workflow:
  rules:
    - if: >
          ($CI_COMMIT_REF_NAME == "master"
          && $CI_PIPELINE_SOURCE == "merge_request_event")
      when: always
    - if: >
          ($CI_COMMIT_REF_NAME == 'staging'
          && $CI_PIPELINE_SOURCE == "merge_request_event")
      when: always
    - if: >
          ($CI_COMMIT_REF_NAME == 'develop'
          && $CI_PIPELINE_SOURCE == "push")
      when: always
    - if: >
          ($CI_COMMIT_REF_NAME == 'ci-test'
          && $CI_PIPELINE_SOURCE == "push")
      when: always

set-vars:
  stage: .pre
  image: docker.io/alpine:3.15
  before_script:
    - apk add jq --no-cache
  script:
    - >
      echo "VERSION=$(cat package.json
      | jq .version --raw-output)" > build.env
    - cat .env >> build.env
    - echo "NAMESPACE=envidat-frontend" >> build.env
    - echo "APP_NAME=frontend-${CI_COMMIT_REF_NAME}" >> build.env
    - source build.env
    - >
      echo "IMAGE_NAME=${INTERNAL_REG}/frontend:${VERSION}-${CI_COMMIT_REF_NAME}"
      >> build.env
  artifacts:
    reports:
      dotenv: build.env

run-tests:
  stage: test
  image: node:16
  cache:
    key: node-modules
    paths:
      - node_modules/
    policy: pull-push
  before_script:
    - npm install
  script:
    - npm run test:unit

# visual-regression:
#   stage: visual-regression
#   image: node:16
#   cache:
#     key: node-modules
#     paths:
#       - node_modules/
#     policy: pull
#   before_script:
#     - npm install
#   script:
#     - npx chromatic --project-token=${CHROMATIC_PROJECT_TOKEN} --exit-zero-on-changes

image-build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - >
      echo "${IMAGE_REGISTRY_CA_CERT}"
      | base64 -d >> /kaniko/ssl/certs/ca-certificates.crt
    - mkdir -p /kaniko/.docker
    - >
      echo "{\"auths\":{\"${INTERNAL_REG}\":{\"auth\":\"$(printf
      "%s:%s" "${IMAGE_REGISTRY_USER}" "${IMAGE_REGISTRY_PASS}"
      | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  script:
    - >
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --target prod
      --cache=true
      --destination "${IMAGE_NAME}-unverified"
      --build-arg MAINTAINER_APP="${MAINTAINER_APP}"
      --build-arg MAINTAINER_CD="${MAINTAINER_CD}"
      --build-arg EXTERNAL_REG="${EXTERNAL_REG}"

image-scan:
  stage: scan
  image:
    name: docker.io/aquasec/trivy:0.23.0
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  before_script:
    - >
      echo "${IMAGE_REGISTRY_CA_CERT}"
      | base64 -d >> /etc/ssl/certs/ca-certificates.crt
  script:
    - trivy --version
    - time trivy image --clear-cache
    - time trivy --cache-dir .trivycache/ image --download-db-only --no-progress
    # Create report artifact
    - >
      time trivy --cache-dir .trivycache/ image --exit-code 0 --ignore-unfixed
      --no-progress --format template --template "@/contrib/gitlab.tpl"
      --output "$CI_PROJECT_DIR/gl-container-scanning-report.json"
      "$IMAGE_NAME-unverified"
    # Print full report
    - >
      time trivy --cache-dir .trivycache/ image --exit-code 0 --ignore-unfixed
      --no-progress "$IMAGE_NAME"-unverified
    # Fail on critical vulnerabilities
    - >
      time trivy --cache-dir .trivycache/ image --exit-code 1 --ignore-unfixed
      --severity CRITICAL --no-progress "$IMAGE_NAME"-unverified
  cache:
    key: trivy-cache
    paths:
      - .trivycache/
    policy: pull-push
  artifacts:
    when: always
    reports:
      container_scanning: gl-container-scanning-report.json

image-retag:
  stage: retag
  image:
    name: quay.io/skopeo/stable:v1.5.2
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  before_script:
    - >
      echo "${IMAGE_REGISTRY_CA_CERT}"
      | base64 -d >> /etc/ssl/certs/ca-bundle.crt
    - >
      echo "${IMAGE_REGISTRY_PASS}" | skopeo login
      -u "${IMAGE_REGISTRY_USER}" --password-stdin "${INTERNAL_REG}"
  script:
    - >
      skopeo --debug copy
      "docker://${IMAGE_NAME}-unverified"
      "docker://${IMAGE_NAME}"

helm-deploy:
  stage: deploy
  image:
    name: alpine/helm:3.8.0
    entrypoint: [""]
  before_script:
    - apk add yq --no-cache
  script: |
    yq eval --inplace \
      ".appVersion = \"${VERSION}-${CI_COMMIT_REF_NAME}\"" \
      "${CI_PROJECT_DIR}/chart/Chart.yaml"
    if [ "${CI_COMMIT_REF_NAME}" != "master" ]; then
        yq eval --inplace \
          ".ingress.hosts[0].host = \"${APP_NAME}.envidat.ch\"" \
          "${CI_PROJECT_DIR}/chart/values.yaml"
        yq eval --inplace \
          ".ingress.tls[0].hosts[0] = \"${APP_NAME}.envidat.ch\"" \
          "${CI_PROJECT_DIR}/chart/values.yaml"
        yq eval --inplace \
          '.autoscaling.enabled = false' \
          "${CI_PROJECT_DIR}/chart/values.yaml"
    fi
    helm upgrade "${APP_NAME}" "${CI_PROJECT_DIR}/chart" \
      --install --values="${CI_PROJECT_DIR}/chart/values.yaml" \
      --namespace "${NAMESPACE}"
