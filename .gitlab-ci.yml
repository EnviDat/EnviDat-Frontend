stages:
  - test
# - visual-regression
  - config
  - build
  - deploy

variables:
  ARTIFACT_COMPRESSION_LEVEL: "fast"
  CACHE_COMPRESSION_LEVEL: "fast"

workflow:
  rules:
    - if: >
          ($CI_COMMIT_REF_NAME == "main"
          && $CI_PIPELINE_SOURCE == "merge_request_event")
      when: always
    - if: >
          ($CI_COMMIT_REF_NAME == "staging"
          && $CI_PIPELINE_SOURCE == "merge_request_event")
      when: always
    - if: >
          ($CI_COMMIT_REF_NAME == "develop"
          && $CI_PIPELINE_SOURCE == "push")
      changes:
        - src/**/*
        - public/**/*
        - tests/**/*
        - nginx/**/*
        - chart/**/*
        - .env*
        - package.json*
        - vue.*
        - Dockerfile
        - .gitlab-ci.yml
      when: always
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always

set-vars:
  stage: .pre
  image: docker.io/alpine:3.15
  before_script:
    - >
      apk add jq yq --no-cache
      --repository=https://dl-cdn.alpinelinux.org/alpine/edge/community
  script:
    - echo "VERSION=$(jq '.version' package.json --raw-output)" >> build.env
    - cat .env >> build.env
    - echo "NAMESPACE=envidat-frontend" >> build.env
    - |
      if [ "${CI_COMMIT_REF_NAME}" == "develop" ]; then
        echo "CI_COMMIT_REF_NAME=dev" >> build.env
      fi
    - echo CHART_VERSION=$(yq '.version' chart/Chart.yaml) >> build.env
    - source build.env
    - >
      echo "IMAGE_NAME=${INTERNAL_REG}/frontend:${VERSION}-${CI_COMMIT_REF_NAME}"
      >> build.env
  artifacts:
    reports:
      dotenv: build.env

run-tests:
  stage: test
  image: docker.io/node:16
  cache:
    key: node-modules
    paths:
      - node_modules/
    policy: pull-push
  before_script:
    - npm install
  script:
    - npm run test:unit

# visual-regression:
#   stage: visual-regression
#   image: docker.io/node:16
#   cache:
#     key: node-modules
#     paths:
#       - node_modules/
#     policy: pull
#   before_script:
#     - npm install
#   script:
#     - npx chromatic --project-token=${CHROMATIC_PROJECT_TOKEN} --exit-zero-on-changes

modify-env:
  stage: config
  image: docker.io/python:3.9-alpine
  cache:
    key: dotenv-config
    paths:
      - .env.production
    policy: push
  before_script:
    - pip install --upgrade pip
    - pip install python-dotenv==0.19.*
  script:
    - "python -c
      \"import os;
      import dotenv;
      file = '.env.production';
      key = 'VITE_ENVIDAT_PROXY';
      branch = os.getenv('CI_COMMIT_REF_NAME');
      value = 'https://envidat.ch' if branch == 'main' \
      else f'https://ckan-{branch}.envidat.ch';
      dotenv.set_key(file, key, value, quote_mode='never')\"
      "
    - "python -c
      \"import os;
      import dotenv;
      file = '.env.production';
      key = 'VUE_APP_CONFIG_URL';
      branch = os.getenv('CI_COMMIT_REF_NAME');
      value = ( \
          f'https://frontend-config.s3-zh.os.switch.ch/{branch}.json' \
      );
      dotenv.set_key(file, key, value, quote_mode='never')\"
      "

image-build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  cache:
    key: dotenv-config
    paths:
      - .env.production
    policy: pull
  before_script:
    - >
      echo "${IMAGE_REGISTRY_CA_CERT}"
      | base64 -d >> /kaniko/ssl/certs/ca-certificates.crt
    - mkdir -p /kaniko/.docker
    - >
      echo "{\"auths\":{\"${INTERNAL_REG}\":{\"auth\":\"$(printf
      "%s:%s" "${IMAGE_REGISTRY_USER}" "${IMAGE_REGISTRY_PASS}"
      | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  script:
    - >
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --target prod
      --cache=true
      --destination "${IMAGE_NAME}"
      --build-arg APP_VERSION="${VERSION}"
      --build-arg MAINTAINER_APP="${MAINTAINER_APP}"
      --build-arg MAINTAINER_CD="${MAINTAINER_CD}"
      --build-arg INTERNAL_REG="${INTERNAL_REG}"
      --build-arg EXTERNAL_REG="${EXTERNAL_REG}"

rclone-sync:
  stage: deploy
  image: "${IMAGE_NAME}"
  variables:
    GIT_STRATEGY: none
    RCLONE_CONFIG_SWITCH_TYPE: 's3'
    RCLONE_S3_PROVIDER: 'Other'
    RCLONE_S3_ENV_AUTH: 'true'
  before_script:
    - apk add curl unzip --no-cache
    - curl -O https://downloads.rclone.org/v1.59.0/rclone-v1.59.0-linux-amd64.zip
    - unzip rclone-v1.59.0-linux-amd64.zip
    - cp rclone-v1.59.0-linux-amd64/rclone /usr/bin/
    - |
      if [ "${CI_COMMIT_REF_NAME}" == "main" ]; then
        BUCKET_NAME="frontend"
      else
        BUCKET_NAME="frontend-${CI_COMMIT_REF_NAME}"
      fi
  script:
    >
    rclone --verbose sync
    /usr/share/nginx/html/ "switch:${BUCKET_NAME}"
    --header-upload "Cache-Control: max-age=300"
